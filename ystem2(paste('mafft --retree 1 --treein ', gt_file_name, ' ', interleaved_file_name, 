system2                  package:base                  R Documentation

_I_n_v_o_k_e _a _S_y_s_t_e_m _C_o_m_m_a_n_d

_D_e_s_c_r_i_p_t_i_o_n:

     ‘system2’ invokes the OS command specified by ‘command’.

_U_s_a_g_e:

     system2(command, args = character(),
             stdout = "", stderr = "", stdin = "", input = NULL,
             env = character(), wait = TRUE,
             minimized = FALSE, invisible = TRUE)
     
_A_r_g_u_m_e_n_t_s:

 command: the system command to be invoked, as a character string.

    args: a character vector of arguments to ‘command’.

stdout, stderr: where output to ‘stdout’ or ‘stderr’ should be sent.
          Possible values are ‘""’, to the R console (the default),
          ‘NULL’ or ‘FALSE’ (discard output), ‘TRUE’ (capture the
          output in a character vector) or a character string naming a
          file.

   stdin: should input be diverted?  ‘""’ means the default,
          alternatively a character string naming a file.  Ignored if
          ‘input’ is supplied.

   input: if a character vector is supplied, this is copied one string
          per line to a temporary file, and the standard input of
          ‘command’ is redirected to the file.

     env: character vector of name=value strings to set environment
          variables.

    wait: a logical (not ‘NA’) indicating whether the R interpreter
          should wait for the command to finish, or run it
          asynchronously.  This will be ignored (and the interpreter
          will always wait) if ‘stdout = TRUE’.

minimized, invisible: arguments that are accepted on Windows but
          ignored on this platform, with a warning.

_D_e_t_a_i_l_s:

     Unlike ‘system’, ‘command’ is always quoted by ‘shQuote’, so it
     must be a single command without arguments.

     For details of how ‘command’ is found see ‘system’.

     On Windows, ‘env’ is only supported for commands such as ‘R’ and
     ‘make’ which accept environment variables on their command line.

     Some Unix commands (such as some implementations of ‘ls’) change
     their output if they consider it to be piped or redirected:
     ‘stdout = TRUE’ uses a pipe whereas ‘stdout = "some_file_name"’
     uses redirection.

     Because of the way it is implemented, on a Unix-alike ‘stderr =
     TRUE’ implies ‘stdout = TRUE’: a warning is given if this is not
     what was specified.

_V_a_l_u_e:

     If ‘stdout = TRUE’ or ‘stderr = TRUE’, a character vector giving
     the output of the command, one line per character string.  (Output
     lines of more than 8095 bytes will be split.)  If the command
     could not be run an R error is generated.  If ‘command’ runs but
     gives a non-zero exit status this will be reported with a warning
     and in the attribute ‘"status"’ of the result: an attribute
     ‘"errmsg"’ may also be available.

     In other cases, the return value is an error code (‘0’ for
     success), given the invisible attribute (so needs to be printed
     explicitly).  If the command could not be run for any reason, the
     value is ‘127’.  Otherwise if ‘wait = TRUE’ the value is the exit
     status returned by the command, and if ‘wait = FALSE’ it is ‘0’
     (the conventional success value).

_N_o_t_e:

     ‘system2’ is a more portable and flexible interface than ‘system’,
     introduced in R 2.12.0.  It allows redirection of output without
     needing to invoke a shell on Windows, a portable way to set
     environment variables for the execution of ‘command’, and finer
     control over the redirection of ‘stdout’ and ‘stderr’.
     Conversely, ‘system’ (and ‘shell’ on Windows) allows the
     invocation of arbitrary command lines.

     There is no guarantee that if ‘stdout’ and ‘stderr’ are both
     ‘TRUE’ or the same file that the two streams will be interleaved
     in order.  This depends on both the buffering used by the command
     and the OS.

_S_e_e _A_l_s_o:

     ‘system’.


